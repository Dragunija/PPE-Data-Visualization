#! /usr/bin/env python

"""
3D event viewer via WebGL/Three.js
"""

from __future__ import print_function, division


import argparse
ap = argparse.ArgumentParser()
ap.add_argument("EVTFILE", help="file to read events from")
ap.add_argument("--evtmax", dest="NMAX", type=int, default=10, help="max number of events to write out")
# ap.add_argument("--ptmin", dest="PT_CUTOFF", metavar="PT", type=float, default=0., help="hide particles with pT < PT (in GeV)")
args = ap.parse_args()


def render_html(objects):
    doc = """
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset=utf-8>
        <title>My first three.js app</title>
        <style>
          body { margin: 0; }
          canvas { width: 100%; height: 100% }
        </style>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/93/three.js"></script>
        <!-- <script src="three.js-master/examples/js/controls/OrbitControls.js"></script> -->
        <script src="OrbitControls.js"></script>
      </head>

      <body>
        <script>

        var camera, controls, scene, renderer;
        var material, geometry, line, light;
        init();
        animate();

        function init() {
          renderer = new THREE.WebGLRenderer();
          renderer.setSize( window.innerWidth, window.innerHeight );
          document.body.appendChild( renderer.domElement );

          var origin = new THREE.Vector3(0, 0, 0);

          camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.01, 5000 );
          camera.position.set(800, 300, 1400);
          //camera.position.set(0, 0, 500) ;
          camera.lookAt(origin);

          controls = new THREE.OrbitControls( camera, renderer.domElement );
          ////controls.addEventListener( 'change', render ); // call this only in static scenes (i.e., if there is no animation loop)
          //controls.enableDamping = true; // an animation loop is required when either damping or auto-rotation are enabled
          //controls.dampingFactor = 0.1;
          //controls.screenSpacePanning = false;
          //controls.minDistance = 100;
          //controls.maxDistance = 500
          //controls.maxPolarAngle = Math.PI / 2;

          scene = new THREE.Scene();

          var ptlight = new THREE.PointLight(0xffffff);
          ptlight.position.set(1000.0, 1000.0, 50.0);
          scene.add(ptlight);

          //var spotlight = new THREE.SpotLight(0xffffff);
          //spotlight.position.set(1.25, 1.25, 1.25);
          //scene.add(spotlight);

          light = new THREE.AmbientLight(0x444444);
          scene.add(light);

          var material_det = new THREE.MeshBasicMaterial( { color: 0x9999ff, transparent: true, opacity: 0.2 } );
          var material_beam = new THREE.LineDashedMaterial( { color: 0x666666, linewidth: 5. } );
          var material_pho = new THREE.LineBasicMaterial( { color: 0x0099aa, linewidth: 2. } );
          var material_elec = new THREE.LineBasicMaterial( { color: 0xcccc00, linewidth: 4. } );
          var material_muon = new THREE.LineBasicMaterial( { color: 0xff6600, linewidth: 4. } );
          var material_bjet02 = new THREE.MeshLambertMaterial( { color: 0xff9999, transparent: true, opacity: 0.6, emissive: 10, reflectivity: 1 } );
          var material_jet04 = new THREE.MeshLambertMaterial( { color: 0xdd9999, transparent: true, opacity: 0.6, emissive: 10, reflectivity: 1 } );
          var material_jet10 = new THREE.MeshLambertMaterial( { color: 0xffff00, transparent: true, opacity: 0.6, emissive: 10, reflectivity: 1 } );
          var material_nu  = new THREE.LineBasicMaterial( { color: 0x333333, linewidth: 2. } );
          var material_had = new THREE.LineBasicMaterial( { color: 0x338833, linewidth: 2. } );

          //var geom = new THREE.CylinderGeometry(115.0, 115.0, 700.0, 32);
          //var solenoid = new THREE.Mesh(geom, material_det );
          //solenoid.rotation.x += Math.PI / 2
          //scene.add(solenoid);

          geom = new THREE.Geometry();
          geom.vertices.push( new THREE.Vector3(0, 0, -2000) );
          geom.vertices.push( new THREE.Vector3(0, 0,  2000) );
          line = new THREE.Line(geom, material_beam);
          scene.add( line );
    """

    ## Render objects
    for obj in objects:
        pid, p4 = obj

        ## Set styles from PIDs
        if abs(pid) == 11:
            pidname = "elec"
        elif abs(pid) == 13:
            pidname = "muon"
        elif pid == 93:
            pidname = "jet04"
        elif pid == 94:
            pidname = "jet10"
        elif pid == 95:
            pidname = "bjet02"
        else:
            pidname = "had"

        ## Kinematics
        pt = p4.pT()
        p = p4.p()
        verts = [(0,0,0), (p4.px(), p4.py(), p4.pz())]
        doc += "\n          var mom = new THREE.Vector3({v[0]:.2f}, {v[1]:.2f}, {v[2]:.2f});".format(v=verts[-1])

        ## Particles
        if "jet" not in pidname:
            doc += "\n          var geom = new THREE.Geometry();"
            doc += "\n          geom.vertices.push(origin);"
            doc += "\n          geom.vertices.push(mom);"
            doc += "\n          var obj = new THREE.Line(geom, material_{mat});".format(mat=pidname)
            doc += "\n          scene.add(obj);\n"

        ## Jets
        else:
            r = float(pidname[-2:]) / 10.
            doc += "\n          var geom = new THREE.ConeBufferGeometry({rad:.2f}, {len:.2f}, 64);".format(rad=r*p, len=p)
            doc += "\n          var obj = new THREE.Mesh(geom, material_{mat});".format(mat=pidname)
            doc += "\n          obj.quaternion.setFromUnitVectors(obj.up, mom.clone().normalize().multiplyScalar(-1));"
            doc += "\n          obj.position.copy(mom.clone().multiplyScalar(0.5));"
            # doc += "\n          console.log(obj.position);"
            doc += "\n          scene.add(obj);\n"

    doc += """
        }

        function animate() {
            requestAnimationFrame(animate);
            //controls.update(); // only required if controls.enableDamping = true, or if controls.autoRotate = true
            render();
        }

        function render() {
            renderer.render(scene, camera);
        }

        </script>
      </body>
    </html>
    """

    return doc


## Event-reader loop
with open(args.EVTFILE) as f:
    import numpy as np
    import heputils as hep

    evt, evtnum = None, 0
    for line in f:
        if line.startswith("E"):
            evtnum += 1
            if evt:
                print("Non-ljet: pT={}".format(p4non94.pT()))
                print("Total: pT={}".format(p4tot.pT()))
                h = render_html(evt)
                hfile = "evt3d_{f}_{n:06d}.html".format(f=args.EVTFILE.replace(".", "_"), n=evtnum)
                with open(hfile, "w") as f:
                    f.write(h)
            if evtnum > args.NMAX:
                break

            print("\nEVENT {}".format(evtnum))
            evt = []
            p4non94 = hep.P4()
            p4tot = hep.P4()
        else:
            pid, x,y,z,e = [float(a) for a in line.strip().split()]
            pid = int(pid)
            p4 = hep.P4_mkXYZE(x,y,z,e) if pid > 90 else hep.P4_mkXYZM(x,y,z,0)
            p4tot += p4
            if pid != 94:
                p4non94 += p4
            evt.append( (pid, p4) )
            print("{}: pT={:.1f}".format(pid, p4.pT()))
